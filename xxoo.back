#include <stdio.h>
#include <ctype.h>
#include <stdlib.h>
#include <string.h>

#define MAX 1024 * 1024

/* 
 * auto: -1
 * break: -2
 * case: -3
 * char: -4
 * const: -5
 * continue: -6
 * default: -7
 * do: -8
 * double: -9
 * else: -10
 * enum: -11
 * extern: -12
 * float: -13
 * for: -14
 * goto: -15
 * if: -16
 * int: -17
 * long: -18
 * register: -19
 * return: -20
 * short: -21
 * signed: -22
 * sizeof: -23
 * static: -24
 * struct: -25
 * switeh: -26
 * typedef: -27
 * union: -28
 * unsigned: -29
 * void: -30
 * volatile: -31
 * while: -32
 * 
 * key: 0
 * dight: 1
 * string: 2
 * (: 3
 * ): 4
 * [: 5
 * ]: 6
 * {: 7
 * }: 8
 */

struct token {
    int tag;
    int value;
    char *str;
};

struct table {
    int length;
    struct token *tokens[MAX];
};

main(int argc, char *argv[])
{
    FILE *fp;
    char *prog = argv[0];
    char ori_code[MAX];
    char code[MAX];
    struct table token_table;

    void load_code(FILE *, char *);
    void clean_code(char *, char *);
    void scan_code(char *, struct table *);
    void scan_word(struct table *);

    /* begin debug */
    int i;
    /* end debug */

    token_table.length = 0;
    if (argc == 1)
	fprintf(stderr, "%s: no input file\n", prog);
    else
	if ((fp = fopen(*++argv, "r")) == NULL) {
	    fprintf(stderr, "%s: can't open %s\n", prog, *argv);
	    exit(1);
	} else {
	    /* load code */
	    load_code(fp, ori_code);
	    fclose(fp);
	    /* clean code */
	    clean_code(ori_code, code);
	    /* scan code */
	    scan_code(code, &token_table);
	    /* scan key word */
	    scan_word(&token_table);

	    /* begin debug */
	    for (i = 0; i < token_table.length; ++i)
		printf("token[%d]:\n\ttag: %d\n\tvalue: %d\n\tstr:%s\n",
		       i,
		       token_table.tokens[i]->tag,
		       token_table.tokens[i]->value,
		       token_table.tokens[i]->str);
	    /* end debug */

	}
    if (ferror(stdout)) {
	fprintf(stderr, "%s: error writing stdout\n", prog);
	exit(2);
    }
    exit(0);
}

void load_code(FILE *ifp, char *ori_code)
{
    int c, i;

    i = 0;
    while ((c = getc(ifp)) != EOF)
	ori_code[i++] = c;
    ori_code[i] = '\0';
}

void clean_code(char *ori_code, char *code)
{
    int i, j;

    i = 0;
    j = 0;

    while (ori_code[i] != '\0') {
	/* remove comment */
	if (ori_code[i] == '/' && ori_code[i + 1] == '*') {
	    while (!(ori_code[i] == '*' && ori_code[i + 1] == '/'))
		i++;
	    code[j++] = ' ';
	    i += 2;
	}
	code[j++] = ori_code[i++];
    }
    code[j] = '\0';
}

void scan_code(char *code, struct table *token_table)
{
    int i, j, line, v;

    i = 0;
    line = 0;
    while (code[i]) {
	/* ignore blank character */
	while (code[i]) {
	    if (code[i] == ' ' || code[i] == '\t') {
		i++;
		continue;
	    } else if (code[i] == '\n') {
		i++;
		line++;
	    }
	    else
		break;
	}
	/* scan number */
	if (isdigit(code[i])) {
	    v = 0;
	    do {
		v = 10 * v + (int)(code[i]) - 48;
		i++;
	    } while (isdigit(code[i]));
	    token_table->tokens[token_table->length] = 
		(struct token *)malloc(sizeof(struct token));
	    token_table->tokens[token_table->length]->tag = 1;
	    token_table->tokens[token_table->length]->value = v;
	    token_table->tokens[token_table->length]->str = NULL;
	    token_table->length++;
	}
	/* scan string */
	else if (isalpha(code[i])) {
	    j = i;
	    do {
		j++;
	    } while (isalpha(code[j]));
	    
	    token_table->tokens[token_table->length] = 
		(struct token *)malloc(sizeof(struct token));
	    token_table->tokens[token_table->length]->tag = 2;
	    token_table->tokens[token_table->length]->value = 0;
	    token_table->tokens[token_table->length]->str = 
		(char *)malloc((j - i + 1) * sizeof(char));
	    strncpy(token_table->tokens[token_table->length]->str,
		   code + i, j - i);
	    token_table->tokens[token_table->length]->str[j - i] = '\0';
	    token_table->length++;

	    i = j;
	} else if (code[i] == '(') {
	    token_table->tokens[token_table->length] = 
		(struct token *)malloc(sizeof(struct token));
	    token_table->tokens[token_table->length]->tag = 3;
	    token_table->tokens[token_table->length]->value = 0;
	    token_table->tokens[token_table->length]->str = 
		(char *)malloc(sizeof(char));
	    token_table->tokens[token_table->length]->str[0] = '(';
	    token_table->length++;
	    i++;
	} else if (code[i] == ')') {
	    token_table->tokens[token_table->length] = 
		(struct token *)malloc(sizeof(struct token));
	    token_table->tokens[token_table->length]->tag = 4;
	    token_table->tokens[token_table->length]->value = 0;
	    token_table->tokens[token_table->length]->str = 
		(char *)malloc(sizeof(char));
	    token_table->tokens[token_table->length]->str[0] = ')';
	    token_table->length++;
	    i++;
	} else if (code[i] == '[') {
	    token_table->tokens[token_table->length] = 
		(struct token *)malloc(sizeof(struct token));
	    token_table->tokens[token_table->length]->tag = 5;
	    token_table->tokens[token_table->length]->value = 0;
	    token_table->tokens[token_table->length]->str = 
		(char *)malloc(sizeof(char));
	    token_table->tokens[token_table->length]->str[0] = '[';
	    token_table->length++;
	    i++;
	} else if (code[i] == ']') {
	    token_table->tokens[token_table->length] = 
		(struct token *)malloc(sizeof(struct token));
	    token_table->tokens[token_table->length]->tag = 6;
	    token_table->tokens[token_table->length]->value = 0;
	    token_table->tokens[token_table->length]->str = 
		(char *)malloc(sizeof(char));
	    token_table->tokens[token_table->length]->str[0] = ']';
	    token_table->length++;
	    i++;
	} else if (code[i] == '{') {
	    token_table->tokens[token_table->length] = 
		(struct token *)malloc(sizeof(struct token));
	    token_table->tokens[token_table->length]->tag = 7;
	    token_table->tokens[token_table->length]->value = 0;
	    token_table->tokens[token_table->length]->str = 
		(char *)malloc(sizeof(char));
	    token_table->tokens[token_table->length]->str[0] = '{';
	    token_table->length++;
	    i++;
	} else if (code[i] == '}') {
	    token_table->tokens[token_table->length] = 
		(struct token *)malloc(sizeof(struct token));
	    token_table->tokens[token_table->length]->tag = 8;
	    token_table->tokens[token_table->length]->value = 0;
	    token_table->tokens[token_table->length]->str = 
		(char *)malloc(sizeof(char));
	    token_table->tokens[token_table->length]->str[0] = '}';
	    token_table->length++;
	    i++;
	} else if (code[i] == ',') {
	    token_table->tokens[token_table->length] = 
		(struct token *)malloc(sizeof(struct token));
	    token_table->tokens[token_table->length]->tag = 9;
	    token_table->tokens[token_table->length]->value = 0;
	    token_table->tokens[token_table->length]->str = 
		(char *)malloc(sizeof(char));
	    token_table->tokens[token_table->length]->str[0] = ',';
	    token_table->length++;
	    i++;
	} else if (code[i] == ';') {
	    token_table->tokens[token_table->length] = 
		(struct token *)malloc(sizeof(struct token));
	    token_table->tokens[token_table->length]->tag = 10;
	    token_table->tokens[token_table->length]->value = 0;
	    token_table->tokens[token_table->length]->str = 
		(char *)malloc(sizeof(char));
	    token_table->tokens[token_table->length]->str[0] = ';';
	    token_table->length++;
	    i++;
	} else if (code[i] == '-') {
	    token_table->tokens[token_table->length] = 
		(struct token *)malloc(sizeof(struct token));
	    token_table->tokens[token_table->length]->tag = 11;
	    token_table->tokens[token_table->length]->value = 0;
	    token_table->tokens[token_table->length]->str = 
		(char *)malloc(sizeof(char));
	    token_table->tokens[token_table->length]->str[0] = '-';
	    token_table->length++;
	    i++;
	} else if (code[i] == '"') {
	    token_table->tokens[token_table->length] = 
		(struct token *)malloc(sizeof(struct token));
	    token_table->tokens[token_table->length]->tag = 12;
	    token_table->tokens[token_table->length]->value = 0;
	    token_table->tokens[token_table->length]->str = 
		(char *)malloc(sizeof(char));
	    token_table->tokens[token_table->length]->str[0] = '"';
	    token_table->length++;
	    i++;
	} else if (code[i] == '>') {
	    token_table->tokens[token_table->length] = 
		(struct token *)malloc(sizeof(struct token));
	    token_table->tokens[token_table->length]->tag = 13;
	    token_table->tokens[token_table->length]->value = 0;
	    token_table->tokens[token_table->length]->str = 
		(char *)malloc(sizeof(char));
	    token_table->tokens[token_table->length]->str[0] = '>';
	    token_table->length++;
	    i++;
	} else if (code[i] == '<') {
	    token_table->tokens[token_table->length] = 
		(struct token *)malloc(sizeof(struct token));
	    token_table->tokens[token_table->length]->tag = 14;
	    token_table->tokens[token_table->length]->value = 0;
	    token_table->tokens[token_table->length]->str = 
		(char *)malloc(sizeof(char));
	    token_table->tokens[token_table->length]->str[0] = '<';
	    token_table->length++;
	    i++;
	} else if (code[i] == '!') {
	    token_table->tokens[token_table->length] = 
		(struct token *)malloc(sizeof(struct token));
	    token_table->tokens[token_table->length]->tag = 15;
	    token_table->tokens[token_table->length]->value = 0;
	    token_table->tokens[token_table->length]->str = 
		(char *)malloc(sizeof(char));
	    token_table->tokens[token_table->length]->str[0] = '!';
	    token_table->length++;
	    i++;
        } else if (code[i] == ':') {
	    token_table->tokens[token_table->length] = 
		(struct token *)malloc(sizeof(struct token));
	    token_table->tokens[token_table->length]->tag = 16;
	    token_table->tokens[token_table->length]->value = 0;
	    token_table->tokens[token_table->length]->str = 
		(char *)malloc(sizeof(char));
	    token_table->tokens[token_table->length]->str[0] = ':';
	    token_table->length++;
	    i++;
	} else if (code[i] == '#') {
	    token_table->tokens[token_table->length] = 
		(struct token *)malloc(sizeof(struct token));
	    token_table->tokens[token_table->length]->tag = 17;
	    token_table->tokens[token_table->length]->value = 0;
	    token_table->tokens[token_table->length]->str = 
		(char *)malloc(sizeof(char));
	    token_table->tokens[token_table->length]->str[0] = '#';
	    token_table->length++;
	    i++;
	} else if (code[i] == '.') {
	    token_table->tokens[token_table->length] = 
		(struct token *)malloc(sizeof(struct token));
	    token_table->tokens[token_table->length]->tag = 18;
	    token_table->tokens[token_table->length]->value = 0;
	    token_table->tokens[token_table->length]->str = 
		(char *)malloc(sizeof(char));
	    token_table->tokens[token_table->length]->str[0] = '.';
	    token_table->length++;
	    i++;
	} else {
	    i++;
	}
    }
}

/* 
 * auto: -1
 * break: -2
 * case: -3
 * char: -4
 * const: -5
 * continue: -6
 * default: -7
 * do: -8
 * double: -9
 * else: -10
 * enum: -11
 * extern: -12
 * float: -13
 * for: -14
 * goto: -15
 * if: -16
 * int: -17
 * long: -18
 * register: -19
 * return: -20
 * short: -21
 * signed: -22
 * sizeof: -23
 * static: -24
 * struct: -25
 * switeh: -26
 * typedef: -27
 * union: -28
 * unsigned: -29
 * void: -30
 * volatile: -31
 * while: -32
 */
void scan_word(struct table *token_table)
{
    int i;

    for (i = 0; i < token_table->length; ++i)
	if (token_table->tokens[i]->tag == 2)
	    if (!strcmp(token_table->tokens[i]->str, "auto"))
		token_table->tokens[i]->tag = -1;
	    else if (!strcmp(token_table->tokens[i]->str, "break"))
		token_table->tokens[i]->tag = -2;
	    else if (!strcmp(token_table->tokens[i]->str, "case"))
		token_table->tokens[i]->tag = -3;
	    else if (!strcmp(token_table->tokens[i]->str, "char"))
		token_table->tokens[i]->tag = -4;
	    else if (!strcmp(token_table->tokens[i]->str, "const"))
		token_table->tokens[i]->tag = -5;
	    else if (!strcmp(token_table->tokens[i]->str, "continue"))
		token_table->tokens[i]->tag = -6;
	    else if (!strcmp(token_table->tokens[i]->str, "default"))
		token_table->tokens[i]->tag = -7;
	    else if (!strcmp(token_table->tokens[i]->str, "do"))
		token_table->tokens[i]->tag = -8;
	    else if (!strcmp(token_table->tokens[i]->str, "double"))
		token_table->tokens[i]->tag = -9;
	    else if (!strcmp(token_table->tokens[i]->str, "else"))
		token_table->tokens[i]->tag = -10;
	    else if (!strcmp(token_table->tokens[i]->str, "enum"))
		token_table->tokens[i]->tag = -11;
	    else if (!strcmp(token_table->tokens[i]->str, "extern"))
		token_table->tokens[i]->tag = -12;
	    else if (!strcmp(token_table->tokens[i]->str, "float"))
		token_table->tokens[i]->tag = -13;
	    else if (!strcmp(token_table->tokens[i]->str, "for"))
		token_table->tokens[i]->tag = -14;
	    else if (!strcmp(token_table->tokens[i]->str, "goto"))
		token_table->tokens[i]->tag = -15;
	    else if (!strcmp(token_table->tokens[i]->str, "if"))
		token_table->tokens[i]->tag = -16;
	    else if (!strcmp(token_table->tokens[i]->str, "int"))
		token_table->tokens[i]->tag = -17;
	    else if (!strcmp(token_table->tokens[i]->str, "long"))
		token_table->tokens[i]->tag = -18;
	    else if (!strcmp(token_table->tokens[i]->str, "register"))
		token_table->tokens[i]->tag = -19;
	    else if (!strcmp(token_table->tokens[i]->str, "return"))
		token_table->tokens[i]->tag = -20;
	    else if (!strcmp(token_table->tokens[i]->str, "short"))
		token_table->tokens[i]->tag = -21;
	    else if (!strcmp(token_table->tokens[i]->str, "signed"))
		token_table->tokens[i]->tag = -22;
	    else if (!strcmp(token_table->tokens[i]->str, "sizeof"))
		token_table->tokens[i]->tag = -23;
	    else if (!strcmp(token_table->tokens[i]->str, "static"))
		token_table->tokens[i]->tag = -24;
	    else if (!strcmp(token_table->tokens[i]->str, "struct"))
		token_table->tokens[i]->tag = -25;
	    else if (!strcmp(token_table->tokens[i]->str, "switch"))
		token_table->tokens[i]->tag = -26;
	    else if (!strcmp(token_table->tokens[i]->str, "typedef"))
		token_table->tokens[i]->tag = -25;
	    else if (!strcmp(token_table->tokens[i]->str, "union"))
		token_table->tokens[i]->tag = -26;
	    else if (!strcmp(token_table->tokens[i]->str, "unsigned"))
		token_table->tokens[i]->tag = -27;
	    else if (!strcmp(token_table->tokens[i]->str, "void"))
		token_table->tokens[i]->tag = -28;
	    else if (!strcmp(token_table->tokens[i]->str, "volatile"))
		token_table->tokens[i]->tag = -29;
	    else if (!strcmp(token_table->tokens[i]->str, "while"))
		token_table->tokens[i]->tag = -30;
}
